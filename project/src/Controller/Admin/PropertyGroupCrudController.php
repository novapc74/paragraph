<?php

namespace App\Controller\Admin;

use App\Entity\Property;
use App\Entity\PropertyGroup;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\SlugField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\RequestStack;

class PropertyGroupCrudController extends AbstractCrudController
{
    public function __construct(private readonly AdminUrlGenerator $adminUrlGenerator,
                                private readonly RequestStack $requestStack)
    {
    }

    public static function getEntityFqcn(): string
    {
        return PropertyGroup::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInSingular('Группу')
            ->setPageTitle('new', 'Новая группа')
            ->setPageTitle('edit', fn(PropertyGroup $propertyGroup) => sprintf('Редактировать группу: " %s "', $propertyGroup->getTitle()))
            ->setEntityLabelInPlural('Группы');
    }

    public function configureActions(Actions $actions): Actions
    {
        $showProperties = Action::new('show properties', 'Показать св-ва.')
            ->displayIf(fn(PropertyGroup $propertyGroup) => $propertyGroup->getProperties()->count() > 0)
            ->displayAsLink()
            ->linkToCrudAction('showProperties');

        return parent::configureActions($actions)
            ->add(Crud::PAGE_INDEX, $showProperties);
    }

    public function showProperties(AdminContext $context): RedirectResponse
    {
        /**@var PropertyGroup $group */
        $group = $context->getEntity()->getInstance();
        $idCollection = $group->getProperties()->map(fn(Property $property) => $property->getId())->toArray();

        $url = $this->adminUrlGenerator->unsetAll()
            ->setController(PropertyCrudController::class)
            ->setAction(Crud::PAGE_INDEX)
            ->set('entity_id', implode(',', $idCollection))
            ->generateUrl();

        return $this->redirect($url);
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            TextField::new('title', 'Название')
                ->setTextAlign('center')
                ->setColumns('col-sm-6 col-lg-5 col-xxl-3')
            ,
            FormField::addRow(),
            SlugField::new('slug', 'Идентификатор')
                ->setTargetFieldName('title')
                ->setTextAlign('center')
                ->setColumns('col-sm-6 col-lg-5 col-xxl-3')
            ,
            FormField::addRow(),
            IntegerField::new('position', 'Позиция')
                ->setTextAlign('center')
                ->setColumns('col-sm-6 col-lg-5 col-xxl-3')
            ,
        ];
    }

    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        if ($this->requestStack->getCurrentRequest()->query->has('entityId')) {
            $entityId = $this->requestStack->getCurrentRequest()->query->get('entityId');

            return parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters)
                ->where('entity.id = :val')
                ->setParameter('val', $entityId);

        }
        return parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters); // TODO: Change the autogenerated stub
    }
}
